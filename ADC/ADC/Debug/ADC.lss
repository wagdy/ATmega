
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000086a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  000010e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000139e  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000553  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075e  00000000  00000000  00002ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000378  00000000  00000000  00003218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  00003590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000082a  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000042fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e1       	ldi	r26, 0x10	; 16
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 31       	cpi	r26, 0x10	; 16
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  8a:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z11LCD_Commandc>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
  92:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8c 7f       	andi	r24, 0xFC	; 252
  98:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
  9a:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z11LCD_Commandc+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z11LCD_Commandc+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
  a4:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e6       	ldi	r24, 0x6F	; 111
  a8:	97 e1       	ldi	r25, 0x17	; 23
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z11LCD_Commandc+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z11LCD_Commandc+0x1e>
  b0:	00 00       	nop
	_delay_ms(3);									/* Wait little bit */
}
  b2:	08 95       	ret

000000b4 <_Z8LCD_Charc>:

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
  b4:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
  b6:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	89 60       	ori	r24, 0x09	; 9
  bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z8LCD_Charc+0xc>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8LCD_Charc+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
  c6:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <_Z8LCD_Charc+0x18>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_Z8LCD_Charc+0x1e>
  d2:	00 00       	nop
	_delay_ms(1);									/* Wait little bit */
}
  d4:	08 95       	ret

000000d6 <_Z8LCD_Initv>:

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	8b 60       	ori	r24, 0x0B	; 11
  da:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	9c e9       	ldi	r25, 0x9C	; 156
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z8LCD_Initv+0xe>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z8LCD_Initv+0x14>
  ea:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_Command (0x06);								/* Auto Increment cursor */
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_Command (0x01);								/* Clear LCD command */
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
}
 10a:	08 95       	ret

0000010c <_Z10LCD_StringPc>:

void LCD_String (char *str)							/* Send string to LCD function */
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <_Z10LCD_StringPc+0x18>
	LCD_Command (0x06);								/* Auto Increment cursor */
	LCD_Command (0x01);								/* Clear LCD command */
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
}

void LCD_String (char *str)							/* Send string to LCD function */
 118:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 11a:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z8LCD_Charc>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 11e:	89 91       	ld	r24, Y+
 120:	88 23       	and	r24, r24
 122:	d9 f7       	brne	.-10     	; 0x11a <_Z10LCD_StringPc+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <_Z13LCD_String_xyccPc>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ea 01       	movw	r28, r20
	if (row == 1)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	31 f4       	brne	.+12     	; 0x140 <_Z13LCD_String_xyccPc+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 134:	86 2f       	mov	r24, r22
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
 13e:	07 c0       	rjmp	.+14     	; 0x14e <_Z13LCD_String_xyccPc+0x24>
	else if (row == 2)
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	29 f4       	brne	.+10     	; 0x14e <_Z13LCD_String_xyccPc+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 144:	86 2f       	mov	r24, r22
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	80 6c       	ori	r24, 0xC0	; 192
 14a:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_String(str);								/* Call LCD string function */
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 86 00 	call	0x10c	; 0x10c <_Z10LCD_StringPc>
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <_Z9LCD_Clearv>:

void LCD_Clear (void)								/* LCD clear function */
{
	LCD_Command (0x01);								/* Clear LCD command */
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandc>
}
 166:	08 95       	ret

00000168 <_Z12DIO_voidInitv>:
PINC, PIND };
static volatile u8* const DIO_u8WritePortArr[DIO_u8PORTNUMBERS] = { PORTA,
PORTB, PORTC, PORTD };

void DIO_voidInit(void) {
	*DDRA |= DIO_u8PORTA_DIR;
 168:	8a b3       	in	r24, 0x1a	; 26
 16a:	8a bb       	out	0x1a, r24	; 26
	*DDRB |= DIO_u8PORTB_DIR;
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	87 bb       	out	0x17, r24	; 23
	*DDRC |= DIO_u8PORTC_DIR;
 170:	84 b3       	in	r24, 0x14	; 20
 172:	84 bb       	out	0x14, r24	; 20
	*DDRD |= DIO_u8PORTD_DIR;
 174:	81 b3       	in	r24, 0x11	; 17
 176:	81 bb       	out	0x11, r24	; 17

	*PORTA = (*PORTA & ~DIO_u8PORTA_DIR) | (DIO_u8PORTA_DIR & DIO_u8PORTA_VAL);
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8b bb       	out	0x1b, r24	; 27
	*PORTB = (*PORTB & ~DIO_u8PORTB_DIR) | (DIO_u8PORTB_DIR & DIO_u8PORTB_VAL);
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	88 bb       	out	0x18, r24	; 24
	*PORTC = (*PORTC & ~DIO_u8PORTC_DIR) | (DIO_u8PORTC_DIR & DIO_u8PORTC_VAL);
 180:	85 b3       	in	r24, 0x15	; 21
 182:	85 bb       	out	0x15, r24	; 21
	*PORTD = (*PORTD & ~DIO_u8PORTD_DIR) | (DIO_u8PORTD_DIR & DIO_u8PORTD_VAL);
 184:	82 b3       	in	r24, 0x12	; 18
 186:	82 bb       	out	0x12, r24	; 18

	return;
}
 188:	08 95       	ret

0000018a <_Z17DIO_u8ReadPortDirhPh>:

u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	70 f4       	brcc	.+28     	; 0x1aa <_Z17DIO_u8ReadPortDirhPh+0x20>
		Local_u8ReturnFlag = ERROR;
	} else {
		*Copy_u8PtrToDir = *DIO_u8RWDirArr[Copy_u8PortIdx];
 18e:	e8 2f       	mov	r30, r24
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 5a       	subi	r30, 0xA0	; 160
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	01 90       	ld	r0, Z+
 19c:	f0 81       	ld	r31, Z
 19e:	e0 2d       	mov	r30, r0
 1a0:	80 81       	ld	r24, Z
 1a2:	fb 01       	movw	r30, r22
 1a4:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
}

u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
		*Copy_u8PtrToDir = *DIO_u8RWDirArr[Copy_u8PortIdx];
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 1ac:	08 95       	ret

000001ae <_Z18DIO_u8WritePortDirhh>:

u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx, u8 Copy_u8PortDir) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	60 f4       	brcc	.+24     	; 0x1ca <_Z18DIO_u8WritePortDirhh+0x1c>
		Local_u8ReturnFlag = ERROR;
	} else {
		*DIO_u8RWDirArr[Copy_u8PortIdx] = Copy_u8PortDir;
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	01 90       	ld	r0, Z+
 1c0:	f0 81       	ld	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	60 83       	st	Z, r22
		Local_u8ReturnFlag = OK;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret

u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx, u8 Copy_u8PortDir) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
		*DIO_u8RWDirArr[Copy_u8PortIdx] = Copy_u8PortDir;
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 1cc:	08 95       	ret

000001ce <_Z17DIO_u8ReadPortValhPh>:

u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx, u8* Copy_u8PtrToVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 1ce:	84 30       	cpi	r24, 0x04	; 4
 1d0:	70 f4       	brcc	.+28     	; 0x1ee <_Z17DIO_u8ReadPortValhPh+0x20>
		Local_u8ReturnFlag = ERROR;
	} else {
		*Copy_u8PtrToVal = *DIO_u8ReadPortArr[Copy_u8PortIdx];
 1d2:	e8 2f       	mov	r30, r24
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	e8 59       	subi	r30, 0x98	; 152
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	01 90       	ld	r0, Z+
 1e0:	f0 81       	ld	r31, Z
 1e2:	e0 2d       	mov	r30, r0
 1e4:	80 81       	ld	r24, Z
 1e6:	fb 01       	movw	r30, r22
 1e8:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	08 95       	ret

u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx, u8* Copy_u8PtrToVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		*Copy_u8PtrToVal = *DIO_u8ReadPortArr[Copy_u8PortIdx];
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 1f0:	08 95       	ret

000001f2 <_Z18DIO_u8WritePortValhh>:

void DIO_u8WritePortVal(u8 Copy_u8PortIdx, u8 Copy_u8PortVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	50 f4       	brcc	.+20     	; 0x20a <_Z18DIO_u8WritePortValhh+0x18>
		Local_u8ReturnFlag = ERROR;
	} else {
		*DIO_u8WritePortArr[Copy_u8PortIdx] = Copy_u8PortVal;
 1f6:	e8 2f       	mov	r30, r24
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	e0 59       	subi	r30, 0x90	; 144
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	01 90       	ld	r0, Z+
 204:	f0 81       	ld	r31, Z
 206:	e0 2d       	mov	r30, r0
 208:	60 83       	st	Z, r22
 20a:	08 95       	ret

0000020c <_Z16DIO_u8ReadPinDirhPh>:
	}
	return ;
}
u8 DIO_u8ReadPinDir(u8 Copy_u8ChIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 20c:	80 32       	cpi	r24, 0x20	; 32
 20e:	28 f5       	brcc	.+74     	; 0x25a <_Z16DIO_u8ReadPinDirhPh+0x4e>
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToDir = GET_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
 210:	e8 2f       	mov	r30, r24
 212:	e6 95       	lsr	r30
 214:	e6 95       	lsr	r30
 216:	e6 95       	lsr	r30
 218:	f0 e0       	ldi	r31, 0x00	; 0
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToDir = GET_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e0 5a       	subi	r30, 0xA0	; 160
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	01 90       	ld	r0, Z+
 224:	f0 81       	ld	r31, Z
 226:	e0 2d       	mov	r30, r0
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
 228:	20 81       	ld	r18, Z
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	87 70       	andi	r24, 0x07	; 7
 22e:	90 70       	andi	r25, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	08 2e       	mov	r0, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <_Z16DIO_u8ReadPinDirhPh+0x32>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <_Z16DIO_u8ReadPinDirhPh+0x2e>
 242:	24 23       	and	r18, r20
 244:	35 23       	and	r19, r21
 246:	a9 01       	movw	r20, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <_Z16DIO_u8ReadPinDirhPh+0x42>
 24a:	55 95       	asr	r21
 24c:	47 95       	ror	r20
 24e:	8a 95       	dec	r24
 250:	e2 f7       	brpl	.-8      	; 0x24a <_Z16DIO_u8ReadPinDirhPh+0x3e>
 252:	fb 01       	movw	r30, r22
 254:	40 83       	st	Z, r20
		Local_u8ReturnFlag = OK;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
	return ;
}
u8 DIO_u8ReadPinDir(u8 Copy_u8ChIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 25a:	80 e0       	ldi	r24, 0x00	; 0
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;

}
 25c:	08 95       	ret

0000025e <_Z17DIO_u8WritePinDirhh>:
u8 DIO_u8WritePinDir(u8 Copy_u8ChIdx, u8 Copy_u8PinDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 25e:	80 32       	cpi	r24, 0x20	; 32
 260:	38 f5       	brcc	.+78     	; 0x2b0 <_Z17DIO_u8WritePinDirhh+0x52>
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinDir);
 262:	e8 2f       	mov	r30, r24
 264:	e6 95       	lsr	r30
 266:	e6 95       	lsr	r30
 268:	e6 95       	lsr	r30
 26a:	f0 e0       	ldi	r31, 0x00	; 0
u8 DIO_u8WritePinDir(u8 Copy_u8ChIdx, u8 Copy_u8PinDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	e0 5a       	subi	r30, 0xA0	; 160
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	01 90       	ld	r0, Z+
 276:	f0 81       	ld	r31, Z
 278:	e0 2d       	mov	r30, r0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinDir);
 27a:	70 81       	ld	r23, Z
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	87 70       	andi	r24, 0x07	; 7
 280:	90 70       	andi	r25, 0x00	; 0
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	9a 01       	movw	r18, r20
 288:	08 2e       	mov	r0, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <_Z17DIO_u8WritePinDirhh+0x32>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <_Z17DIO_u8WritePinDirhh+0x2e>
 294:	20 95       	com	r18
 296:	27 23       	and	r18, r23
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	ab 01       	movw	r20, r22
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <_Z17DIO_u8WritePinDirhh+0x44>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <_Z17DIO_u8WritePinDirhh+0x40>
 2a6:	ca 01       	movw	r24, r20
 2a8:	82 2b       	or	r24, r18
 2aa:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret

}
u8 DIO_u8WritePinDir(u8 Copy_u8ChIdx, u8 Copy_u8PinDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinDir);
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 2b2:	08 95       	ret

000002b4 <_Z16DIO_u8ReadPinValhPh>:

u8 DIO_u8ReadPinVal(u8 Copy_u8ChIdx, u8* Copy_u8PtrToVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 2b4:	80 32       	cpi	r24, 0x20	; 32
 2b6:	28 f5       	brcc	.+74     	; 0x302 <_Z16DIO_u8ReadPinValhPh+0x4e>
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToVal = GET_BIT(
				*DIO_u8ReadPortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
 2b8:	e8 2f       	mov	r30, r24
 2ba:	e6 95       	lsr	r30
 2bc:	e6 95       	lsr	r30
 2be:	e6 95       	lsr	r30
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToVal = GET_BIT(
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	e8 59       	subi	r30, 0x98	; 152
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	01 90       	ld	r0, Z+
 2cc:	f0 81       	ld	r31, Z
 2ce:	e0 2d       	mov	r30, r0
				*DIO_u8ReadPortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
 2d0:	20 81       	ld	r18, Z
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	87 70       	andi	r24, 0x07	; 7
 2d6:	90 70       	andi	r25, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	08 2e       	mov	r0, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_Z16DIO_u8ReadPinValhPh+0x32>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <_Z16DIO_u8ReadPinValhPh+0x2e>
 2ea:	24 23       	and	r18, r20
 2ec:	35 23       	and	r19, r21
 2ee:	a9 01       	movw	r20, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_Z16DIO_u8ReadPinValhPh+0x42>
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	8a 95       	dec	r24
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_Z16DIO_u8ReadPinValhPh+0x3e>
 2fa:	fb 01       	movw	r30, r22
 2fc:	40 83       	st	Z, r20
		Local_u8ReturnFlag = OK;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	08 95       	ret
}

u8 DIO_u8ReadPinVal(u8 Copy_u8ChIdx, u8* Copy_u8PtrToVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 302:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 304:	08 95       	ret

00000306 <_Z17DIO_u8WritePinValhh>:

u8 DIO_u8WritePinVal(u8 Copy_u8ChIdx, u8 Copy_u8PinVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 306:	80 32       	cpi	r24, 0x20	; 32
 308:	38 f5       	brcc	.+78     	; 0x358 <_Z17DIO_u8WritePinValhh+0x52>
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8WritePortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinVal);
 30a:	e8 2f       	mov	r30, r24
 30c:	e6 95       	lsr	r30
 30e:	e6 95       	lsr	r30
 310:	e6 95       	lsr	r30
 312:	f0 e0       	ldi	r31, 0x00	; 0
u8 DIO_u8WritePinVal(u8 Copy_u8ChIdx, u8 Copy_u8PinVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8WritePortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	e0 59       	subi	r30, 0x90	; 144
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	01 90       	ld	r0, Z+
 31e:	f0 81       	ld	r31, Z
 320:	e0 2d       	mov	r30, r0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinVal);
 322:	70 81       	ld	r23, Z
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	87 70       	andi	r24, 0x07	; 7
 328:	90 70       	andi	r25, 0x00	; 0
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	9a 01       	movw	r18, r20
 330:	08 2e       	mov	r0, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <_Z17DIO_u8WritePinValhh+0x32>
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <_Z17DIO_u8WritePinValhh+0x2e>
 33c:	20 95       	com	r18
 33e:	27 23       	and	r18, r23
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	ab 01       	movw	r20, r22
 344:	02 c0       	rjmp	.+4      	; 0x34a <_Z17DIO_u8WritePinValhh+0x44>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <_Z17DIO_u8WritePinValhh+0x40>
 34e:	ca 01       	movw	r24, r20
 350:	82 2b       	or	r24, r18
 352:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	08 95       	ret
}

u8 DIO_u8WritePinVal(u8 Copy_u8ChIdx, u8 Copy_u8PinVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 358:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinVal);
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 35a:	08 95       	ret

0000035c <_Z9ADCEnablev>:
const static u8 ADC_prescaler_selection[ADC_PRESCALER_OPTIONS][ADC_PRESCALER_BITS]=
{ { 0, 0, 0 }, { 0, 0, 1 }, { 0, 1, 0 }, { 0, 1, 1 }, { 1, 0, 0 }, { 1,
				0, 1 }, { 1, 1, 0 }, { 1, 1, 1 } };
					
extern void ADCEnable(){
	SET_BIT(*ADCSRA,7);
 35c:	37 9a       	sbi	0x06, 7	; 6
	//*ADCSRA|=(1<<7);
	return;
}
 35e:	08 95       	ret

00000360 <_Z10ADCDisAblev>:

extern void ADCDisAble()
{
	CLR_BIT(*ADCSRA,7);
 360:	37 98       	cbi	0x06, 7	; 6
	return;
}
 362:	08 95       	ret

00000364 <_Z10ADC_Configv>:

extern void ADC_Config()
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
 368:	ed e7       	ldi	r30, 0x7D	; 125
 36a:	f0 e0       	ldi	r31, 0x00	; 0
	CLR_BIT(*ADCSRA,7);
	return;
}

extern void ADC_Config()
{
 36c:	24 e0       	ldi	r18, 0x04	; 4
 36e:	30 e0       	ldi	r19, 0x00	; 0
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	a7 b1       	in	r26, 0x07	; 7
 376:	41 91       	ld	r20, Z+
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	02 2e       	mov	r0, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <_Z10ADC_Configv+0x1e>
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	0a 94       	dec	r0
 384:	e2 f7       	brpl	.-8      	; 0x37e <_Z10ADC_Configv+0x1a>
 386:	eb 01       	movw	r28, r22
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <_Z10ADC_Configv+0x2c>
 38c:	cc 0f       	add	r28, r28
 38e:	dd 1f       	adc	r29, r29
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <_Z10ADC_Configv+0x28>
 394:	ce 01       	movw	r24, r28
 396:	80 95       	com	r24
 398:	8a 23       	and	r24, r26
 39a:	48 2b       	or	r20, r24
 39c:	47 b9       	out	0x07, r20	; 7
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	30 40       	sbci	r19, 0x00	; 0

extern void ADC_Config()
{
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
 3a2:	df ef       	ldi	r29, 0xFF	; 255
 3a4:	2f 3f       	cpi	r18, 0xFF	; 255
 3a6:	3d 07       	cpc	r19, r29
 3a8:	29 f7       	brne	.-54     	; 0x374 <_Z10ADC_Configv+0x10>
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
 3aa:	3d 98       	cbi	0x07, 5	; 7
 3ac:	ec ea       	ldi	r30, 0xAC	; 172
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	22 e0       	ldi	r18, 0x02	; 2
 3b2:	30 e0       	ldi	r19, 0x00	; 0
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	a6 b1       	in	r26, 0x06	; 6
 3ba:	41 91       	ld	r20, Z+
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	02 2e       	mov	r0, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <_Z10ADC_Configv+0x62>
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <_Z10ADC_Configv+0x5e>
 3ca:	eb 01       	movw	r28, r22
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <_Z10ADC_Configv+0x70>
 3d0:	cc 0f       	add	r28, r28
 3d2:	dd 1f       	adc	r29, r29
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <_Z10ADC_Configv+0x6c>
 3d8:	ce 01       	movw	r24, r28
 3da:	80 95       	com	r24
 3dc:	8a 23       	and	r24, r26
 3de:	48 2b       	or	r20, r24
 3e0:	46 b9       	out	0x06, r20	; 6
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	30 40       	sbci	r19, 0x00	; 0
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
 3e6:	df ef       	ldi	r29, 0xFF	; 255
 3e8:	2f 3f       	cpi	r18, 0xFF	; 255
 3ea:	3d 07       	cpc	r19, r29
 3ec:	29 f7       	brne	.-54     	; 0x3b8 <_Z10ADC_Configv+0x54>
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
	}
	
	//ADC INT Enable
	ASSIGN_BIT(*ADCSRA,ADIE,ADC_INTERRUPT_ED);
 3ee:	33 98       	cbi	0x06, 3	; 6
	
	//ADC_AUTO TRIGGER
	ASSIGN_BIT(*ADCSRA,ADATE,ADC_AUTOTRIGGER_ED);
 3f0:	35 98       	cbi	0x06, 5	; 6
	
	return;
	
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <_Z15ADC_ReadOneTimePt>:

extern void ADC_ReadOneTime(u16 *PtrToVal)
{
	//step 1 : Start Conversion
	SET_BIT(*ADCSRA,ADSC);
 3f8:	36 9a       	sbi	0x06, 6	; 6
	//step 2 : Wait for comersion to complete 
	while(GET_BIT(*ADCSRA,ADIF)==0);
 3fa:	34 9b       	sbis	0x06, 4	; 6
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <_Z15ADC_ReadOneTimePt+0x2>
	//Step 3 : Read Result From ADC register
	*PtrToVal = *ADC;
 3fe:	24 b1       	in	r18, 0x04	; 4
 400:	35 b1       	in	r19, 0x05	; 5
 402:	fc 01       	movw	r30, r24
 404:	31 83       	std	Z+1, r19	; 0x01
 406:	20 83       	st	Z, r18
	//step 4 : Clear Flag
	SET_BIT(*ADCSRA,ADIF);
 408:	34 9a       	sbi	0x06, 4	; 6
	
	return;
}
 40a:	08 95       	ret

0000040c <_Z19ADC_voidReadMulShotPt>:

extern void ADC_voidReadMulShot(u16 *Copy_ptrToVal){
 40c:	ef 92       	push	r14
 40e:	ff 92       	push	r15
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 d0       	rcall	.+0      	; 0x418 <_Z19ADC_voidReadMulShotPt+0xc>
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	7c 01       	movw	r14, r24
 41e:	18 e0       	ldi	r17, 0x08	; 8
	u16 Local_u16Result;
	u8 Local_u8Counter;
	for (Local_u8Counter = 0; Local_u8Counter < 8 ;Local_u8Counter++) {

		ADC_ReadOneTime(&Local_u16Result);
 420:	ce 01       	movw	r24, r28
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z15ADC_ReadOneTimePt>
		*Copy_ptrToVal+=Local_u16Result;
 428:	f7 01       	movw	r30, r14
 42a:	20 81       	ld	r18, Z
 42c:	31 81       	ldd	r19, Z+1	; 0x01
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	80 83       	st	Z, r24
 43a:	11 50       	subi	r17, 0x01	; 1
}

extern void ADC_voidReadMulShot(u16 *Copy_ptrToVal){
	u16 Local_u16Result;
	u8 Local_u8Counter;
	for (Local_u8Counter = 0; Local_u8Counter < 8 ;Local_u8Counter++) {
 43c:	89 f7       	brne	.-30     	; 0x420 <_Z19ADC_voidReadMulShotPt+0x14>

		ADC_ReadOneTime(&Local_u16Result);
		*Copy_ptrToVal+=Local_u16Result;

	}
	*Copy_ptrToVal/=8;
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	91 83       	std	Z+1, r25	; 0x01
 44c:	80 83       	st	Z, r24

	return ;

}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	08 95       	ret

0000045e <main>:
#include "DIO_interface.h"
#include "DIO_prog.c"
#include "ADC_p.c"

int main()
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <main+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	char String[5];
	int value;
	u16 Local_u8AdcResult=0;
 468:	1a 82       	std	Y+2, r1	; 0x02
 46a:	19 82       	std	Y+1, r1	; 0x01


//	LCD_Init();			/* Initialization of LCD */
	//LCD_String("ADC value");	/* Write string on 1st line of LCD */
	DIO_voidInit();
 46c:	0e 94 b4 00 	call	0x168	; 0x168 <_Z12DIO_voidInitv>
	DIO_u8WritePortDir(DIO_u8PORT0,DIO_u8INPUT);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z18DIO_u8WritePortDirhh>
	ADC_Config();
 478:	0e 94 b2 01 	call	0x364	; 0x364 <_Z10ADC_Configv>
	ADCEnable();
 47c:	0e 94 ae 01 	call	0x35c	; 0x35c <_Z9ADCEnablev>
	while(1)
	{
	
	//	LCD_Command(0xc4);	/* LCD16x2 cursor position */
		//value=ADC_Read(0);	/* Read ADC channel 0 */
		ADC_ReadOneTime(&Local_u8AdcResult);
 480:	ce 01       	movw	r24, r28
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <_Z15ADC_ReadOneTimePt>
		DIO_u8WritePortVal(1,Local_u8AdcResult);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	69 81       	ldd	r22, Y+1	; 0x01
 48c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z18DIO_u8WritePortValhh>
		DIO_u8WritePortVal(3,Local_u8AdcResult>>8);
 490:	6a 81       	ldd	r22, Y+2	; 0x02
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z18DIO_u8WritePortValhh>
 498:	f3 cf       	rjmp	.-26     	; 0x480 <main+0x22>

0000049a <ADCEnable>:
const static u8 ADC_prescaler_selection[ADC_PRESCALER_OPTIONS][ADC_PRESCALER_BITS]=
{ { 0, 0, 0 }, { 0, 0, 1 }, { 0, 1, 0 }, { 0, 1, 1 }, { 1, 0, 0 }, { 1,
				0, 1 }, { 1, 1, 0 }, { 1, 1, 1 } };
					
extern void ADCEnable(){
	SET_BIT(*ADCSRA,7);
 49a:	37 9a       	sbi	0x06, 7	; 6
	//*ADCSRA|=(1<<7);
	return;
}
 49c:	08 95       	ret

0000049e <ADCDisAble>:

extern void ADCDisAble()
{
	CLR_BIT(*ADCSRA,7);
 49e:	37 98       	cbi	0x06, 7	; 6
	return;
}
 4a0:	08 95       	ret

000004a2 <ADC_Config>:

extern void ADC_Config()
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
 4a6:	ed eb       	ldi	r30, 0xBD	; 189
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
	CLR_BIT(*ADCSRA,7);
	return;
}

extern void ADC_Config()
{
 4aa:	24 e0       	ldi	r18, 0x04	; 4
 4ac:	30 e0       	ldi	r19, 0x00	; 0
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	a7 b1       	in	r26, 0x07	; 7
 4b4:	41 91       	ld	r20, Z+
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <ADC_Config+0x1e>
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <ADC_Config+0x1a>
 4c4:	eb 01       	movw	r28, r22
 4c6:	02 2e       	mov	r0, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <ADC_Config+0x2c>
 4ca:	cc 0f       	add	r28, r28
 4cc:	dd 1f       	adc	r29, r29
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <ADC_Config+0x28>
 4d2:	ce 01       	movw	r24, r28
 4d4:	80 95       	com	r24
 4d6:	8a 23       	and	r24, r26
 4d8:	48 2b       	or	r20, r24
 4da:	47 b9       	out	0x07, r20	; 7
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	30 40       	sbci	r19, 0x00	; 0

extern void ADC_Config()
{
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
 4e0:	df ef       	ldi	r29, 0xFF	; 255
 4e2:	2f 3f       	cpi	r18, 0xFF	; 255
 4e4:	3d 07       	cpc	r19, r29
 4e6:	29 f7       	brne	.-54     	; 0x4b2 <ADC_Config+0x10>
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
 4e8:	3d 98       	cbi	0x07, 5	; 7
 4ea:	ec ee       	ldi	r30, 0xEC	; 236
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	22 e0       	ldi	r18, 0x02	; 2
 4f0:	30 e0       	ldi	r19, 0x00	; 0
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	a6 b1       	in	r26, 0x06	; 6
 4f8:	41 91       	ld	r20, Z+
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	02 2e       	mov	r0, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <ADC_Config+0x62>
 500:	44 0f       	add	r20, r20
 502:	55 1f       	adc	r21, r21
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <ADC_Config+0x5e>
 508:	eb 01       	movw	r28, r22
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <ADC_Config+0x70>
 50e:	cc 0f       	add	r28, r28
 510:	dd 1f       	adc	r29, r29
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <ADC_Config+0x6c>
 516:	ce 01       	movw	r24, r28
 518:	80 95       	com	r24
 51a:	8a 23       	and	r24, r26
 51c:	48 2b       	or	r20, r24
 51e:	46 b9       	out	0x06, r20	; 6
 520:	21 50       	subi	r18, 0x01	; 1
 522:	30 40       	sbci	r19, 0x00	; 0
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
 524:	df ef       	ldi	r29, 0xFF	; 255
 526:	2f 3f       	cpi	r18, 0xFF	; 255
 528:	3d 07       	cpc	r19, r29
 52a:	29 f7       	brne	.-54     	; 0x4f6 <ADC_Config+0x54>
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
	}
	
	//ADC INT Enable
	ASSIGN_BIT(*ADCSRA,ADIE,ADC_INTERRUPT_ED);
 52c:	33 98       	cbi	0x06, 3	; 6
	
	//ADC_AUTO TRIGGER
	ASSIGN_BIT(*ADCSRA,ADATE,ADC_AUTOTRIGGER_ED);
 52e:	35 98       	cbi	0x06, 5	; 6
	
	return;
	
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <ADC_ReadOneTime>:

extern void ADC_ReadOneTime(u16 *PtrToVal)
{
	//step 1 : Start Conversion
	SET_BIT(*ADCSRA,ADSC);
 536:	36 9a       	sbi	0x06, 6	; 6
	//step 2 : Wait for comersion to complete 
	while(GET_BIT(*ADCSRA,ADIF)==0);
 538:	34 9b       	sbis	0x06, 4	; 6
 53a:	fe cf       	rjmp	.-4      	; 0x538 <ADC_ReadOneTime+0x2>
	//Step 3 : Read Result From ADC register
	*PtrToVal = *ADC;
 53c:	24 b1       	in	r18, 0x04	; 4
 53e:	35 b1       	in	r19, 0x05	; 5
 540:	fc 01       	movw	r30, r24
 542:	31 83       	std	Z+1, r19	; 0x01
 544:	20 83       	st	Z, r18
	//step 4 : Clear Flag
	SET_BIT(*ADCSRA,ADIF);
 546:	34 9a       	sbi	0x06, 4	; 6
	
	return;
}
 548:	08 95       	ret

0000054a <ADC_voidReadMulShot>:

extern void ADC_voidReadMulShot(u16 *Copy_ptrToVal){
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	00 d0       	rcall	.+0      	; 0x556 <ADC_voidReadMulShot+0xc>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	7c 01       	movw	r14, r24
 55c:	18 e0       	ldi	r17, 0x08	; 8
	u16 Local_u16Result;
	u8 Local_u8Counter;
	for (Local_u8Counter = 0; Local_u8Counter < 8 ;Local_u8Counter++) {

		ADC_ReadOneTime(&Local_u16Result);
 55e:	ce 01       	movw	r24, r28
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	0e 94 9b 02 	call	0x536	; 0x536 <ADC_ReadOneTime>
		*Copy_ptrToVal+=Local_u16Result;
 566:	f7 01       	movw	r30, r14
 568:	20 81       	ld	r18, Z
 56a:	31 81       	ldd	r19, Z+1	; 0x01
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	9a 81       	ldd	r25, Y+2	; 0x02
 570:	82 0f       	add	r24, r18
 572:	93 1f       	adc	r25, r19
 574:	91 83       	std	Z+1, r25	; 0x01
 576:	80 83       	st	Z, r24
 578:	11 50       	subi	r17, 0x01	; 1
}

extern void ADC_voidReadMulShot(u16 *Copy_ptrToVal){
	u16 Local_u16Result;
	u8 Local_u8Counter;
	for (Local_u8Counter = 0; Local_u8Counter < 8 ;Local_u8Counter++) {
 57a:	89 f7       	brne	.-30     	; 0x55e <ADC_voidReadMulShot+0x14>

		ADC_ReadOneTime(&Local_u16Result);
		*Copy_ptrToVal+=Local_u16Result;

	}
	*Copy_ptrToVal/=8;
 57c:	96 95       	lsr	r25
 57e:	87 95       	ror	r24
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	91 83       	std	Z+1, r25	; 0x01
 58a:	80 83       	st	Z, r24

	return ;

}
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	ff 90       	pop	r15
 598:	ef 90       	pop	r14
 59a:	08 95       	ret

0000059c <DIO_voidInit>:
PINC, PIND };
static volatile u8* const DIO_u8WritePortArr[DIO_u8PORTNUMBERS] = { PORTA,
PORTB, PORTC, PORTD };

void DIO_voidInit(void) {
	*DDRA |= DIO_u8PORTA_DIR;
 59c:	8a b3       	in	r24, 0x1a	; 26
 59e:	8a bb       	out	0x1a, r24	; 26
	*DDRB |= DIO_u8PORTB_DIR;
 5a0:	87 b3       	in	r24, 0x17	; 23
 5a2:	87 bb       	out	0x17, r24	; 23
	*DDRC |= DIO_u8PORTC_DIR;
 5a4:	84 b3       	in	r24, 0x14	; 20
 5a6:	84 bb       	out	0x14, r24	; 20
	*DDRD |= DIO_u8PORTD_DIR;
 5a8:	81 b3       	in	r24, 0x11	; 17
 5aa:	81 bb       	out	0x11, r24	; 17

	*PORTA = (*PORTA & ~DIO_u8PORTA_DIR) | (DIO_u8PORTA_DIR & DIO_u8PORTA_VAL);
 5ac:	8b b3       	in	r24, 0x1b	; 27
 5ae:	8b bb       	out	0x1b, r24	; 27
	*PORTB = (*PORTB & ~DIO_u8PORTB_DIR) | (DIO_u8PORTB_DIR & DIO_u8PORTB_VAL);
 5b0:	88 b3       	in	r24, 0x18	; 24
 5b2:	88 bb       	out	0x18, r24	; 24
	*PORTC = (*PORTC & ~DIO_u8PORTC_DIR) | (DIO_u8PORTC_DIR & DIO_u8PORTC_VAL);
 5b4:	85 b3       	in	r24, 0x15	; 21
 5b6:	85 bb       	out	0x15, r24	; 21
	*PORTD = (*PORTD & ~DIO_u8PORTD_DIR) | (DIO_u8PORTD_DIR & DIO_u8PORTD_VAL);
 5b8:	82 b3       	in	r24, 0x12	; 18
 5ba:	82 bb       	out	0x12, r24	; 18

	return;
}
 5bc:	08 95       	ret

000005be <DIO_u8ReadPortDir>:

u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 5be:	84 30       	cpi	r24, 0x04	; 4
 5c0:	70 f4       	brcc	.+28     	; 0x5de <DIO_u8ReadPortDir+0x20>
		Local_u8ReturnFlag = ERROR;
	} else {
		*Copy_u8PtrToDir = *DIO_u8RWDirArr[Copy_u8PortIdx];
 5c2:	e8 2f       	mov	r30, r24
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	e8 50       	subi	r30, 0x08	; 8
 5cc:	ff 4f       	sbci	r31, 0xFF	; 255
 5ce:	01 90       	ld	r0, Z+
 5d0:	f0 81       	ld	r31, Z
 5d2:	e0 2d       	mov	r30, r0
 5d4:	80 81       	ld	r24, Z
 5d6:	fb 01       	movw	r30, r22
 5d8:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret
}

u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 5de:	80 e0       	ldi	r24, 0x00	; 0
		*Copy_u8PtrToDir = *DIO_u8RWDirArr[Copy_u8PortIdx];
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 5e0:	08 95       	ret

000005e2 <DIO_u8WritePortDir>:

u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx, u8 Copy_u8PortDir) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 5e2:	84 30       	cpi	r24, 0x04	; 4
 5e4:	60 f4       	brcc	.+24     	; 0x5fe <DIO_u8WritePortDir+0x1c>
		Local_u8ReturnFlag = ERROR;
	} else {
		*DIO_u8RWDirArr[Copy_u8PortIdx] = Copy_u8PortDir;
 5e6:	e8 2f       	mov	r30, r24
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	e8 50       	subi	r30, 0x08	; 8
 5f0:	ff 4f       	sbci	r31, 0xFF	; 255
 5f2:	01 90       	ld	r0, Z+
 5f4:	f0 81       	ld	r31, Z
 5f6:	e0 2d       	mov	r30, r0
 5f8:	60 83       	st	Z, r22
		Local_u8ReturnFlag = OK;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	08 95       	ret

u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx, u8 Copy_u8PortDir) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
		*DIO_u8RWDirArr[Copy_u8PortIdx] = Copy_u8PortDir;
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 600:	08 95       	ret

00000602 <DIO_u8ReadPortVal>:

u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx, u8* Copy_u8PtrToVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	70 f4       	brcc	.+28     	; 0x622 <DIO_u8ReadPortVal+0x20>
		Local_u8ReturnFlag = ERROR;
	} else {
		*Copy_u8PtrToVal = *DIO_u8ReadPortArr[Copy_u8PortIdx];
 606:	e8 2f       	mov	r30, r24
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	e0 50       	subi	r30, 0x00	; 0
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	01 90       	ld	r0, Z+
 614:	f0 81       	ld	r31, Z
 616:	e0 2d       	mov	r30, r0
 618:	80 81       	ld	r24, Z
 61a:	fb 01       	movw	r30, r22
 61c:	80 83       	st	Z, r24
		Local_u8ReturnFlag = OK;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret

u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx, u8* Copy_u8PtrToVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 622:	80 e0       	ldi	r24, 0x00	; 0
		*Copy_u8PtrToVal = *DIO_u8ReadPortArr[Copy_u8PortIdx];
		Local_u8ReturnFlag = OK;
	}
	return Local_u8ReturnFlag;

}
 624:	08 95       	ret

00000626 <DIO_u8WritePortVal>:

void DIO_u8WritePortVal(u8 Copy_u8PortIdx, u8 Copy_u8PortVal) {

	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8PortIdx > DIO_u8PORTNUMBERS - 1 || Copy_u8PortIdx < 0) {
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	50 f4       	brcc	.+20     	; 0x63e <DIO_u8WritePortVal+0x18>
		Local_u8ReturnFlag = ERROR;
	} else {
		*DIO_u8WritePortArr[Copy_u8PortIdx] = Copy_u8PortVal;
 62a:	e8 2f       	mov	r30, r24
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	e8 5f       	subi	r30, 0xF8	; 248
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	01 90       	ld	r0, Z+
 638:	f0 81       	ld	r31, Z
 63a:	e0 2d       	mov	r30, r0
 63c:	60 83       	st	Z, r22
 63e:	08 95       	ret

00000640 <DIO_u8ReadPinDir>:
	}
	return ;
}
u8 DIO_u8ReadPinDir(u8 Copy_u8ChIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 640:	80 32       	cpi	r24, 0x20	; 32
 642:	28 f5       	brcc	.+74     	; 0x68e <DIO_u8ReadPinDir+0x4e>
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToDir = GET_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 644:	e8 2f       	mov	r30, r24
 646:	e6 95       	lsr	r30
 648:	e6 95       	lsr	r30
 64a:	e6 95       	lsr	r30
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	e8 50       	subi	r30, 0x08	; 8
 654:	ff 4f       	sbci	r31, 0xFF	; 255
 656:	01 90       	ld	r0, Z+
 658:	f0 81       	ld	r31, Z
 65a:	e0 2d       	mov	r30, r0
 65c:	20 81       	ld	r18, Z
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	87 70       	andi	r24, 0x07	; 7
 662:	90 70       	andi	r25, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	08 2e       	mov	r0, r24
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_u8ReadPinDir+0x32>
 66e:	44 0f       	add	r20, r20
 670:	55 1f       	adc	r21, r21
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_u8ReadPinDir+0x2e>
 676:	24 23       	and	r18, r20
 678:	35 23       	and	r19, r21
 67a:	a9 01       	movw	r20, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8ReadPinDir+0x42>
 67e:	55 95       	asr	r21
 680:	47 95       	ror	r20
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8ReadPinDir+0x3e>
 686:	fb 01       	movw	r30, r22
 688:	40 83       	st	Z, r20
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
		Local_u8ReturnFlag = OK;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	08 95       	ret
	return ;
}
u8 DIO_u8ReadPinDir(u8 Copy_u8ChIdx, u8* Copy_u8PtrToDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 68e:	80 e0       	ldi	r24, 0x00	; 0
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;

}
 690:	08 95       	ret

00000692 <DIO_u8WritePinDir>:
u8 DIO_u8WritePinDir(u8 Copy_u8ChIdx, u8 Copy_u8PinDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 692:	80 32       	cpi	r24, 0x20	; 32
 694:	38 f5       	brcc	.+78     	; 0x6e4 <DIO_u8WritePinDir+0x52>
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8RWDirArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 696:	e8 2f       	mov	r30, r24
 698:	e6 95       	lsr	r30
 69a:	e6 95       	lsr	r30
 69c:	e6 95       	lsr	r30
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	e8 50       	subi	r30, 0x08	; 8
 6a6:	ff 4f       	sbci	r31, 0xFF	; 255
 6a8:	01 90       	ld	r0, Z+
 6aa:	f0 81       	ld	r31, Z
 6ac:	e0 2d       	mov	r30, r0
 6ae:	70 81       	ld	r23, Z
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	87 70       	andi	r24, 0x07	; 7
 6b4:	90 70       	andi	r25, 0x00	; 0
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	9a 01       	movw	r18, r20
 6bc:	08 2e       	mov	r0, r24
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_u8WritePinDir+0x32>
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	0a 94       	dec	r0
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_u8WritePinDir+0x2e>
 6c8:	20 95       	com	r18
 6ca:	27 23       	and	r18, r23
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	ab 01       	movw	r20, r22
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_u8WritePinDir+0x44>
 6d2:	44 0f       	add	r20, r20
 6d4:	55 1f       	adc	r21, r21
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_u8WritePinDir+0x40>
 6da:	ca 01       	movw	r24, r20
 6dc:	82 2b       	or	r24, r18
 6de:	80 83       	st	Z, r24
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinDir);
		Local_u8ReturnFlag = OK;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	08 95       	ret

}
u8 DIO_u8WritePinDir(u8 Copy_u8ChIdx, u8 Copy_u8PinDir) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinDir);
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 6e6:	08 95       	ret

000006e8 <DIO_u8ReadPinVal>:

u8 DIO_u8ReadPinVal(u8 Copy_u8ChIdx, u8* Copy_u8PtrToVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 6e8:	80 32       	cpi	r24, 0x20	; 32
 6ea:	28 f5       	brcc	.+74     	; 0x736 <DIO_u8ReadPinVal+0x4e>
		Local_u8ReturnFlag = ERROR;
	} else {

		*Copy_u8PtrToVal = GET_BIT(
 6ec:	e8 2f       	mov	r30, r24
 6ee:	e6 95       	lsr	r30
 6f0:	e6 95       	lsr	r30
 6f2:	e6 95       	lsr	r30
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	e0 50       	subi	r30, 0x00	; 0
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
 6fe:	01 90       	ld	r0, Z+
 700:	f0 81       	ld	r31, Z
 702:	e0 2d       	mov	r30, r0
 704:	20 81       	ld	r18, Z
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	87 70       	andi	r24, 0x07	; 7
 70a:	90 70       	andi	r25, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	08 2e       	mov	r0, r24
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8ReadPinVal+0x32>
 716:	44 0f       	add	r20, r20
 718:	55 1f       	adc	r21, r21
 71a:	0a 94       	dec	r0
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8ReadPinVal+0x2e>
 71e:	24 23       	and	r18, r20
 720:	35 23       	and	r19, r21
 722:	a9 01       	movw	r20, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_u8ReadPinVal+0x42>
 726:	55 95       	asr	r21
 728:	47 95       	ror	r20
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_u8ReadPinVal+0x3e>
 72e:	fb 01       	movw	r30, r22
 730:	40 83       	st	Z, r20
				*DIO_u8ReadPortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
		Local_u8ReturnFlag = OK;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	08 95       	ret
}

u8 DIO_u8ReadPinVal(u8 Copy_u8ChIdx, u8* Copy_u8PtrToVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 736:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE));
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 738:	08 95       	ret

0000073a <DIO_u8WritePinVal>:

u8 DIO_u8WritePinVal(u8 Copy_u8ChIdx, u8 Copy_u8PinVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
 73a:	80 32       	cpi	r24, 0x20	; 32
 73c:	38 f5       	brcc	.+78     	; 0x78c <DIO_u8WritePinVal+0x52>
		Local_u8ReturnFlag = ERROR;
	} else {
		ASSIGN_BIT(*DIO_u8WritePortArr[Copy_u8ChIdx/DIO_u8PORTSIZE],
 73e:	e8 2f       	mov	r30, r24
 740:	e6 95       	lsr	r30
 742:	e6 95       	lsr	r30
 744:	e6 95       	lsr	r30
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ee 0f       	add	r30, r30
 74a:	ff 1f       	adc	r31, r31
 74c:	e8 5f       	subi	r30, 0xF8	; 248
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	01 90       	ld	r0, Z+
 752:	f0 81       	ld	r31, Z
 754:	e0 2d       	mov	r30, r0
 756:	70 81       	ld	r23, Z
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	87 70       	andi	r24, 0x07	; 7
 75c:	90 70       	andi	r25, 0x00	; 0
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	9a 01       	movw	r18, r20
 764:	08 2e       	mov	r0, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_u8WritePinVal+0x32>
 768:	22 0f       	add	r18, r18
 76a:	33 1f       	adc	r19, r19
 76c:	0a 94       	dec	r0
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_u8WritePinVal+0x2e>
 770:	20 95       	com	r18
 772:	27 23       	and	r18, r23
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	ab 01       	movw	r20, r22
 778:	02 c0       	rjmp	.+4      	; 0x77e <DIO_u8WritePinVal+0x44>
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	8a 95       	dec	r24
 780:	e2 f7       	brpl	.-8      	; 0x77a <DIO_u8WritePinVal+0x40>
 782:	ca 01       	movw	r24, r20
 784:	82 2b       	or	r24, r18
 786:	80 83       	st	Z, r24
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinVal);
		Local_u8ReturnFlag = OK;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	08 95       	ret
}

u8 DIO_u8WritePinVal(u8 Copy_u8ChIdx, u8 Copy_u8PinVal) {
	u8 Local_u8ReturnFlag = OK;
	if (Copy_u8ChIdx > DIO_u8PINNUMBERS - 1 || Copy_u8ChIdx < 0) {
		Local_u8ReturnFlag = ERROR;
 78c:	80 e0       	ldi	r24, 0x00	; 0
				(Copy_u8ChIdx%DIO_u8PORTSIZE), Copy_u8PinVal);
		Local_u8ReturnFlag = OK;
	}

	return Local_u8ReturnFlag;
}
 78e:	08 95       	ret

00000790 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
 790:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
 792:	85 b3       	in	r24, 0x15	; 21
 794:	8c 7f       	andi	r24, 0xFC	; 252
 796:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
 798:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	8a 95       	dec	r24
 79e:	f1 f7       	brne	.-4      	; 0x79c <LCD_Command+0xc>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <LCD_Command+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 7a2:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a4:	8f e6       	ldi	r24, 0x6F	; 111
 7a6:	97 e1       	ldi	r25, 0x17	; 23
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_Command+0x18>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_Command+0x1e>
 7ae:	00 00       	nop
	_delay_ms(3);									/* Wait little bit */
}
 7b0:	08 95       	ret

000007b2 <LCD_Char>:

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 7b2:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
 7b4:	a9 98       	cbi	0x15, 1	; 21
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
 7b6:	85 b3       	in	r24, 0x15	; 21
 7b8:	89 60       	ori	r24, 0x09	; 9
 7ba:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	8a 95       	dec	r24
 7c0:	f1 f7       	brne	.-4      	; 0x7be <LCD_Char+0xc>
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <LCD_Char+0x12>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 7c4:	ab 98       	cbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7c6:	8f ec       	ldi	r24, 0xCF	; 207
 7c8:	97 e0       	ldi	r25, 0x07	; 7
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <LCD_Char+0x18>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <LCD_Char+0x1e>
 7d0:	00 00       	nop
	_delay_ms(1);									/* Wait little bit */
}
 7d2:	08 95       	ret

000007d4 <LCD_Init>:

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
 7d4:	84 b3       	in	r24, 0x14	; 20
 7d6:	8b 60       	ori	r24, 0x0B	; 11
 7d8:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	87 bb       	out	0x17, r24	; 23
 7de:	8f e3       	ldi	r24, 0x3F	; 63
 7e0:	9c e9       	ldi	r25, 0x9C	; 156
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCD_Init+0xe>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <LCD_Init+0x14>
 7e8:	00 00       	nop
	
	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
 7ea:	88 e3       	ldi	r24, 0x38	; 56
 7ec:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
 7f0:	8c e0       	ldi	r24, 0x0C	; 12
 7f2:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
 7f6:	86 e0       	ldi	r24, 0x06	; 6
 7f8:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 802:	80 e8       	ldi	r24, 0x80	; 128
 804:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
}
 808:	08 95       	ret

0000080a <LCD_String>:

void LCD_String (char *str)							/* Send string to LCD function */
{
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 810:	88 81       	ld	r24, Y
 812:	88 23       	and	r24, r24
 814:	31 f0       	breq	.+12     	; 0x822 <LCD_String+0x18>
	LCD_Command (0x06);								/* Auto Increment cursor */
	LCD_Command (0x01);								/* Clear LCD command */
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
}

void LCD_String (char *str)							/* Send string to LCD function */
 816:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 818:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 81c:	89 91       	ld	r24, Y+
 81e:	88 23       	and	r24, r24
 820:	d9 f7       	brne	.-10     	; 0x818 <LCD_String+0xe>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	08 95       	ret

00000828 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
 82c:	ea 01       	movw	r28, r20
	if (row == 1)
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	31 f4       	brne	.+12     	; 0x83e <LCD_String_xy+0x16>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 832:	86 2f       	mov	r24, r22
 834:	8f 70       	andi	r24, 0x0F	; 15
 836:	80 68       	ori	r24, 0x80	; 128
 838:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
 83c:	07 c0       	rjmp	.+14     	; 0x84c <LCD_String_xy+0x24>
	else if (row == 2)
 83e:	82 30       	cpi	r24, 0x02	; 2
 840:	29 f4       	brne	.+10     	; 0x84c <LCD_String_xy+0x24>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 842:	86 2f       	mov	r24, r22
 844:	8f 70       	andi	r24, 0x0F	; 15
 846:	80 6c       	ori	r24, 0xC0	; 192
 848:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
 84c:	ce 01       	movw	r24, r28
 84e:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_String>
}
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <LCD_Clear>:

void LCD_Clear (void)								/* LCD clear function */
{
	LCD_Command (0x01);								/* Clear LCD command */
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_Command>
}
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
