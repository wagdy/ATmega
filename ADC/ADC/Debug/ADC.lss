
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000049f  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000142  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012b  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004f  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>

int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <ADCEnable>:
const static u8 ADC_prescaler_selection[ADC_PRESCALER_OPTIONS][ADC_PRESCALER_BITS]=
{ { 0, 0, 0 }, { 0, 0, 1 }, { 0, 1, 0 }, { 0, 1, 1 }, { 1, 0, 0 }, { 1,
				0, 1 }, { 1, 1, 0 }, { 1, 1, 1 } };
					
extern void ADCEnable(){
	SET_BIT(*ADCSRA,7);
  94:	37 9a       	sbi	0x06, 7	; 6
	//*ADCSRA|=(1<<7);
	return;
}
  96:	08 95       	ret

00000098 <ADCDisAble>:

extern void ADCDisAble()
{
	CLR_BIT(*ADCSRA,7);
  98:	37 98       	cbi	0x06, 7	; 6
	return;
}
  9a:	08 95       	ret

0000009c <ADC_Config>:

extern void ADC_Config()
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
	CLR_BIT(*ADCSRA,7);
	return;
}

extern void ADC_Config()
{
  a4:	24 e0       	ldi	r18, 0x04	; 4
  a6:	30 e0       	ldi	r19, 0x00	; 0
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	a7 b1       	in	r26, 0x07	; 7
  ae:	41 91       	ld	r20, Z+
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <ADC_Config+0x1e>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <ADC_Config+0x1a>
  be:	eb 01       	movw	r28, r22
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <ADC_Config+0x2c>
  c4:	cc 0f       	add	r28, r28
  c6:	dd 1f       	adc	r29, r29
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <ADC_Config+0x28>
  cc:	ce 01       	movw	r24, r28
  ce:	80 95       	com	r24
  d0:	8a 23       	and	r24, r26
  d2:	48 2b       	or	r20, r24
  d4:	47 b9       	out	0x07, r20	; 7
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0

extern void ADC_Config()
{
	s8 Counter ;
	//Channel select
	for (Counter = CHANNEL_SELECTION_BITS-1;Counter>=0;Counter--)
  da:	df ef       	ldi	r29, 0xFF	; 255
  dc:	2f 3f       	cpi	r18, 0xFF	; 255
  de:	3d 07       	cpc	r19, r29
  e0:	29 f7       	brne	.-54     	; 0xac <ADC_Config+0x10>
	{
		ASSIGN_BIT(*ADMUX,Counter,ADC_channel_select[ADC_CHANNEL][4-Counter]);
	}
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
  e2:	3d 9a       	sbi	0x07, 5	; 7
  e4:	e4 e9       	ldi	r30, 0x94	; 148
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	22 e0       	ldi	r18, 0x02	; 2
  ea:	30 e0       	ldi	r19, 0x00	; 0
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	a6 b1       	in	r26, 0x06	; 6
  f2:	41 91       	ld	r20, Z+
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <ADC_Config+0x62>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <ADC_Config+0x5e>
 102:	eb 01       	movw	r28, r22
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <ADC_Config+0x70>
 108:	cc 0f       	add	r28, r28
 10a:	dd 1f       	adc	r29, r29
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <ADC_Config+0x6c>
 110:	ce 01       	movw	r24, r28
 112:	80 95       	com	r24
 114:	8a 23       	and	r24, r26
 116:	48 2b       	or	r20, r24
 118:	46 b9       	out	0x06, r20	; 6
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	30 40       	sbci	r19, 0x00	; 0
	
	//adjstment
	ASSIGN_BIT(*ADMUX,5,ADC_RESULT);
	
	//PreScaler Selector
	for (Counter=ADC_PRESCALER_BITS-1;Counter>=0;Counter--)
 11e:	df ef       	ldi	r29, 0xFF	; 255
 120:	2f 3f       	cpi	r18, 0xFF	; 255
 122:	3d 07       	cpc	r19, r29
 124:	29 f7       	brne	.-54     	; 0xf0 <ADC_Config+0x54>
	{
		ASSIGN_BIT(*ADCSRA,Counter,ADC_prescaler_selection[ADC_PRESCALER][2-Counter]);
	}
	
	//ADC INT Enable
	ASSIGN_BIT(*ADCSRA,ADIE,ADC_INTERRUPT_ED);
 126:	33 98       	cbi	0x06, 3	; 6
	
	//ADC_AUTO TRIGGER
	ASSIGN_BIT(*ADCSRA,ADATE,ADC_AUTOTRIGGER_ED);
 128:	35 98       	cbi	0x06, 5	; 6
	
	return;
	
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <ADC_ReadOneTime>:

extern void ADC_ReadOneTime(u16 *PtrToVal)
{
	//step 1 : Start Conversion
	SET_BIT(*ADCSRA,ADSC);
 130:	36 9a       	sbi	0x06, 6	; 6
	//step 2 : Wait for comersion to complete 
	while(GET_BIT(*ADCSRA,ADIF)==0);
 132:	34 9b       	sbis	0x06, 4	; 6
 134:	fe cf       	rjmp	.-4      	; 0x132 <ADC_ReadOneTime+0x2>
	//Step 3 : Read Result From ADC register
	*PtrToVal = *ADC;
 136:	24 b1       	in	r18, 0x04	; 4
 138:	35 b1       	in	r19, 0x05	; 5
 13a:	fc 01       	movw	r30, r24
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	20 83       	st	Z, r18
	//step 4 : Clear Flag
	SET_BIT(*ADCSRA,ADIF);
 140:	34 9a       	sbi	0x06, 4	; 6
	
	return;
}
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
